import telebot
from keyboards import *
import db_operations
import tabulate
import os
from dotenv import load_dotenv


# Initialize the bot
load_dotenv()
bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(bot_token)
user_states = {}


# Get the list of savings in a tabular format
def get_saving_list(user_id):
    saving_list = db_operations.Get_saving(user_id)
    formated_savings = [[saving.id, saving.name, saving.description,
                         f"{saving.balance} {saving.currency}"] for saving in saving_list]
    formated_savings.insert(0, ["ID", "NAME", "DESCRIPTION", "BALANCE"])
    table = tabulate.tabulate(formated_savings)
    return table



# Handle the /start command
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç,—è –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤–µ—Å—Ç–∏ –æ–±–ª—ñ–∫ —Ç–≤–æ—ó—Ö –∑–∞–æ—â–∞–¥–∂–µ–Ω—å.\n–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ –º–µ–Ω–µ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–æ–º–∞–Ω–¥–æ—é /help ", reply_markup=start_keyboard)



# Handle the /help command
@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(
        message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n/start - –ø–æ—á–∞—Ç–∏ –¥i–∞–ª–æ–≥\n")


# Handle the "ü§öüèª Stop Action" button
@bot.message_handler(func=lambda message: message.text == 'ü§öüèª –ü—Ä–∏–ø–∏–Ω–∏—Ç –¥—ñ—é')
def create_savings(message):
    user_states.pop(message.chat.id, None)
    bot.send_message(message.chat.id, "–î—ñ—é –ø—Ä–∏–ø–∏–Ω–µ–Ω–æ",
                     reply_markup=def_keyboard)


# Create saving
@bot.message_handler(func=lambda message: message.text == 'üå± –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è')
def create_savings(message):
    user_states[message.chat.id] = 'enter_name'
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è:",
                     reply_markup=action_keyboard)


# Create saving/getting name
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'enter_name')
def enter_description(message):
    if len(message.text) > 30:
        return bot.send_message(message.chat.id, "–û–±—Ä–∞–Ω–µ —ñ–º'—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ(–±—ñ–ª—å—à–µ 30 —Å–∏–º–≤–æ–ª—ñ–≤). –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à–µ.")
    user_states[message.chat.id] = 'enter_description'
    user_states['name'] = message.text
    bot.send_message(
        message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –¥–æ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è\n–ú–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç–∏ —Ü—ñ–ª—å ")

# Create saving/getting description
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'enter_description')
def enter_balance(message):
    if len(message.text) > 150:
        return bot.send_message(message.chat.id, "–û–±—Ä–∞–Ω–∏–π –æ–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π(–±—ñ–ª—å—à–µ 150 —Å–∏–º–≤–æ–ª—ñ–≤). –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à–∏–π.")
    user_states[message.chat.id] = 'enter_balance'
    user_states['description'] = message.text
    bot.send_message(
        message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –¥–æ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ 0")
    

# Create saving/getting balance
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'enter_balance')
def enter_curency(message):
    if len(message.text) > 12:
        return bot.send_message(message.chat.id, "–ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–µ –Ω—ñ–∂ 12 —Å–∏–º–≤–æ–ª—ñ–≤ –∑–∞–≤–¥–æ–≤—à–∫–∏. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à–µ.")
    try:
        float(message.text.strip())
    except ValueError:
        return bot.send_message(message.chat.id, "–ë–∞–ª–∞–Ω—Å –º–∞—î –±—É—Ç–∏ –≤–∫–∞–∑–∞–Ω–∏–π —Ü–∏—Ñ—Ä–∞–º–∏,–ø—Ä–∏ –≤–∫–∞–∑–∞–Ω–Ω—ñ –Ω–µ—Ü—ñ–ª–æ–≥–æ \
                                —á–∏—Å–ª–∞ —Å–∏–º–≤–æ–ª –∫—Ä–∞–ø–∫–∏ '.' –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫.\n–ü—Ä–∏–∫–ª–∞–¥: 12.45")

    user_states[message.chat.id] = 'enter_currency'
    user_states['balance'] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞–ª—é—Ç—É,–≤ —è–∫—ñ–º –≤–µ—Å—Ç–∏–º–µ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è\n–ú–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –∞–±–æ –≤–≤–µ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ",
                     reply_markup=currency_keyboard)



# Create saving/getting currency
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'enter_currency')
def save_savings(message):
    if len(message.text) > 10:
        return bot.send_message(message.chat.id, "–í–∞–ª—é—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–µ –Ω—ñ–∂ 10 —Å–∏–º–≤–æ–ª—ñ–≤ –∑–∞–≤–¥–æ–≤—à–∫–∏. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à–µ.")
    user_states.pop(message.chat.id, None)
    name = user_states['name']
    description = user_states['description']
    balance = user_states['balance']
    currency = message.text
    user_id = message.chat.id
    if message.chat.first_name:
        username = message.chat.first_name
    else:
        username = message.chat.username
    db_operations.Create_savings(
        user_id, username, name, description, balance, currency)
    bot.send_message(
        message.chat.id, f"–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è {name} —Å—Ç–≤–æ—Ä–µ–Ω–æ", reply_markup=def_keyboard)



# Edit saving
@bot.message_handler(func=lambda message: message.text == '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è')
def edit_save(message):
    saving_list = db_operations.Get_saving(message.chat.id)
    save_savings_kb = Generate_edit_keyboard(saving_list, "edit")

    bot.send_message(
        message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=save_savings_kb)


# Edit saving/getting_savingId
@bot.callback_query_handler(func=lambda call: call.data.count("edit") == 1)
def callback_handler(call):
    user_states[call.message.chat.id] = 'edit_saving'
    user_states["saving_id"] = call.data.split("|")[-1]
    bot.send_message(call.message.chat.id,
                     "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, –Ω–∞ —è–∫—É –±–∞–∂–∞—î—Ç–µ –∑–±—ñ–ª—å—à–∏—Ç–∏ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è\n–Ø–∫—â–æ –∂ –±–∞–∂–∞—î—Ç–µ –∑–º–µ–Ω—à–∏—Ç–∏ –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞–π—Ç–µ '-' –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º ")


# Edit saving/commit_editind
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'edit_saving')
def commit_edit_save(message):
    try:
        float(message.text.strip())
    except ValueError:
        return bot.send_message(message.chat.id, "–ß–∏—Å–ª–æ –º–∞—î –±—É—Ç–∏ –≤–∫–∞–∑–∞–Ω–∏–π —Ü–∏—Ñ—Ä–∞–º–∏,–ø—Ä–∏ –≤–∫–∞–∑–∞–Ω–Ω—ñ –Ω–µ—Ü—ñ–ª–æ–≥–æ \
                                —á–∏—Å–ª–∞ —Å–∏–º–≤–æ–ª –∫—Ä–∞–ø–∫–∏ '.' –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫.\n–ü—Ä–∏–∫–ª–∞–¥: 12.45")
    user_states.pop(message.chat.id, None)
    db_operations.Change_saving(user_states["saving_id"], message.text)
    bot.send_message(message.chat.id, f"–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ",
                     reply_markup=def_keyboard)


# Get savings
@bot.message_handler(func=lambda message: message.text == 'üëÅÔ∏è‚Äçüó®Ô∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è')
def get_view(message):
    user_states[message.chat.id] = 'get_view'
    saving_table = get_saving_list(message.chat.id)
    bot.send_message(
        message.chat.id, f"<pre>{saving_table}</pre>", parse_mode="HTML")



# Delete saving 
@bot.message_handler(func=lambda message: message.text == '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è')
def delete_save(message):

    saving_list = db_operations.Get_saving(message.chat.id)
    save_savings_kb = Generate_edit_keyboard(saving_list, "delete")
    bot.send_message(
        message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è", reply_markup=save_savings_kb)

# Delete saving/get savingId
@bot.callback_query_handler(func=lambda call: call.data.count("delete") == 1)
def callback_handler(call):
    data = call.data.split("|")[-1]
    db_operations.Delete_saving(int(data))
    bot.send_message(
            call.message.chat.id, "–í–∏–¥–∞–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ")

# View savings history
@bot.message_handler(func=lambda message: message.text == 'üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é')
def history_view(message):

    saving_list = db_operations.Get_saving(message.chat.id)
    save_savings_kb = Generate_edit_keyboard(saving_list, "history")
    bot.send_message(
        message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –π–æ–≥–æ —ñ—Å—Ç–æ—Ä—ñ—ó", reply_markup=save_savings_kb)


# View savings history/get history_id
@bot.callback_query_handler(func=lambda call: call.data.count("history") != 0)
def history_callback(call):
    save_story = db_operations.get_saving_history(call.data.split("|")[-1])
    formated_story = [[story.id, story.action, story.date]
                      for story in save_story]
    formated_story.insert(0, ["ID", "ACTION", "DATE"])
    table = tabulate.tabulate(formated_story)
    bot.send_message(call.message.chat.id,
                     f"<pre>{table}</pre>", parse_mode="HTML")



# Handle text messages
@bot.message_handler(func=lambda message: True)
def echo(message):
    bot.send_message(
        message.chat.id, f"–í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text},—Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –∞–±–æ –∫–æ–º–∞–Ω–¥–æ—é /start")


# Start polling the bot
bot.polling()
